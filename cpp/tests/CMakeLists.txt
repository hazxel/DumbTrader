add_executable(test_sem test_sem.cpp)
add_executable(test_shared_mem test_shared_mem.cpp)
add_executable(test_ring_buffer test_ring_buffer.cpp)
add_executable(test_socket test_socket.cpp)
add_executable(test_websocket test_websocket.cpp)
add_executable(test_uring_read_file test_uring_read_file.cpp)
add_executable(test_orderbook test_orderbook.cpp)

target_include_directories(test_sem PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_include_directories(test_shared_mem PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_include_directories(test_ring_buffer PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_include_directories(test_socket PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_include_directories(test_websocket PUBLIC ${PROJECT_SOURCE_DIR}/include ${OPENSSL_INCLUDE_DIR})
target_include_directories(test_uring_read_file PUBLIC ${PROJECT_SOURCE_DIR}/include ${OPENSSL_INCLUDE_DIR})
target_include_directories(test_orderbook PUBLIC ${PROJECT_SOURCE_DIR}/include)

target_link_libraries(test_sem PRIVATE dumbtrader)
target_link_libraries(test_shared_mem PRIVATE dumbtrader)
target_link_libraries(test_ring_buffer PRIVATE dumbtrader)
target_link_libraries(test_socket PRIVATE dumbtrader)
target_link_libraries(test_websocket PRIVATE dumbtrader)
target_link_libraries(test_uring_read_file PRIVATE dumbtrader)
target_link_libraries(test_orderbook PRIVATE dumbtrader)

if(UNIX AND NOT APPLE)
    include(CheckIncludeFile)
    check_include_file("liburing.h" HAVE_LIBURING_H)
    if(HAVE_LIBURING_H)
        find_library(LIBURING_LIBRARIES NAMES uring)
        if(LIBURING_LIBRARIES)
            add_compile_definitions(LIBURING_ENABLED)
            target_link_libraries(test_uring_read_file PUBLIC ${LIBURING_LIBRARIES})
        endif()
    endif()
endif()